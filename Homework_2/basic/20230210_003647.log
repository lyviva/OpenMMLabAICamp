2023/02/10 00:36:47 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.13 (default, Oct 21 2022, 23:50:54) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 1262043632
    GPU 0: NVIDIA GeForce GTX 1060 6GB
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.3, V11.3.58
    GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
    PyTorch: 1.12.0+cu113
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.13.0+cu113
    OpenCV: 4.6.0
    MMEngine: 0.5.0

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/02/10 00:36:47 - mmengine - INFO - Config:
model = dict(
    type='MaskRCNN',
    data_preprocessor=dict(
        type='DetDataPreprocessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_mask=True,
        pad_size_divisor=32),
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=1,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=dict(
            type='FCNMaskHead',
            num_convs=4,
            in_channels=256,
            conv_out_channels=256,
            num_classes=1,
            loss_mask=dict(
                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=-1,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            mask_size=28,
            pos_weight=-1,
            debug=False)),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
dataset_type = 'BalloonDataset'
data_root = 'data/balloon/'
file_client_args = dict(backend='disk')
train_pipeline = [
    dict(type='LoadImageFromFile', file_client_args=dict(backend='disk')),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(type='Resize', scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PackDetInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile', file_client_args=dict(backend='disk')),
    dict(type='Resize', scale=(1333, 800), keep_ratio=True),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(
        type='PackDetInputs',
        meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                   'scale_factor'))
]
train_dataloader = dict(
    batch_size=2,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=True),
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    dataset=dict(
        type='BalloonDataset',
        data_root='data/balloon/',
        ann_file='train.json',
        data_prefix=dict(img='train/'),
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(
                type='LoadImageFromFile',
                file_client_args=dict(backend='disk')),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(type='Resize', scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PackDetInputs')
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='BalloonDataset',
        data_root='data/balloon/',
        ann_file='val.json',
        data_prefix=dict(img='val/'),
        test_mode=True,
        pipeline=[
            dict(
                type='LoadImageFromFile',
                file_client_args=dict(backend='disk')),
            dict(type='Resize', scale=(1333, 800), keep_ratio=True),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='BalloonDataset',
        data_root='data/balloon/',
        ann_file='val.json',
        data_prefix=dict(img='val/'),
        test_mode=True,
        pipeline=[
            dict(
                type='LoadImageFromFile',
                file_client_args=dict(backend='disk')),
            dict(type='Resize', scale=(1333, 800), keep_ratio=True),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ]))
val_evaluator = dict(
    type='CocoMetric',
    ann_file='data/balloon/val.json',
    metric=['bbox', 'segm'],
    format_only=False)
test_evaluator = dict(
    type='CocoMetric',
    ann_file='data/balloon/val.json',
    metric=['bbox', 'segm'],
    format_only=False)
train_cfg = dict(type='EpochBasedTrainLoop', max_epochs=20, val_interval=1)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
param_scheduler = [
    dict(
        type='LinearLR', start_factor=0.001, by_epoch=False, begin=0, end=500),
    dict(
        type='MultiStepLR',
        begin=0,
        end=12,
        by_epoch=True,
        milestones=[8, 11],
        gamma=0.1)
]
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.002, momentum=0.9, weight_decay=0.0001))
auto_scale_lr = dict(enable=False, base_batch_size=16)
default_scope = 'mmdet'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=50),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', interval=1),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='DetVisualizationHook'))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='DetLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(type='LogProcessor', window_size=50, by_epoch=True)
log_level = 'INFO'
load_from = 'mask_rcnn_r50_fpn_1x_coco_20200205-d4b0c5d6.pth'
resume = False
launcher = 'none'
work_dir = './work_dirs/mask-rcnn_r50_fpn_1x_balloon'

2023/02/10 00:36:47 - mmengine - WARNING - The "visualizer" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 00:36:47 - mmengine - WARNING - The "vis_backend" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 00:36:47 - mmengine - WARNING - The "model" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 00:36:48 - mmengine - WARNING - The "task util" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 00:36:48 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/02/10 00:36:48 - mmengine - WARNING - The "hook" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 00:36:48 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/02/10 00:36:48 - mmengine - WARNING - The "loop" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 00:36:48 - mmengine - WARNING - The "dataset" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 00:36:48 - mmengine - WARNING - The "transform" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 00:36:49 - mmengine - WARNING - The "data sampler" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 00:36:49 - mmengine - WARNING - The "optimizer constructor" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 00:36:49 - mmengine - WARNING - The "optimizer" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 00:36:49 - mmengine - WARNING - The "optim_wrapper" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 00:36:49 - mmengine - WARNING - The "parameter scheduler" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 00:36:49 - mmengine - WARNING - The "metric" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 00:36:49 - mmengine - WARNING - The "weight initializer" registry in mmdet did not set import location. Fallback to call `mmdet.utils.register_all_modules` instead.
2023/02/10 00:36:49 - mmengine - INFO - load model from: torchvision://resnet50
2023/02/10 00:36:49 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2023/02/10 00:36:49 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([2, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.mask_head.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.upsample.weight - torch.Size([256, 256, 2, 2]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.upsample.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.conv_logits.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.conv_logits.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in FCNMaskHead  
2023/02/10 00:36:49 - mmengine - INFO - Load checkpoint from mask_rcnn_r50_fpn_1x_coco_20200205-d4b0c5d6.pth
2023/02/10 00:36:49 - mmengine - INFO - Checkpoints will be saved to /home/liuyoufu/code/OpenMMLab/mmdetection/work_dirs/mask-rcnn_r50_fpn_1x_balloon.
2023/02/10 00:37:15 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_balloon_20230210_003647
2023/02/10 00:37:15 - mmengine - INFO - Saving checkpoint at 1 epochs
2023/02/10 00:37:25 - mmengine - INFO - Evaluating bbox...
2023/02/10 00:37:25 - mmengine - INFO - bbox_mAP_copypaste: 0.022 0.060 0.010 0.003 0.011 0.035
2023/02/10 00:37:25 - mmengine - INFO - Evaluating segm...
2023/02/10 00:37:26 - mmengine - INFO - segm_mAP_copypaste: 0.036 0.062 0.036 0.006 0.015 0.171
2023/02/10 00:37:26 - mmengine - INFO - Epoch(val) [1][13/13]  coco/bbox_mAP: 0.0220  coco/bbox_mAP_50: 0.0600  coco/bbox_mAP_75: 0.0100  coco/bbox_mAP_s: 0.0030  coco/bbox_mAP_m: 0.0110  coco/bbox_mAP_l: 0.0350  coco/segm_mAP: 0.0360  coco/segm_mAP_50: 0.0620  coco/segm_mAP_75: 0.0360  coco/segm_mAP_s: 0.0060  coco/segm_mAP_m: 0.0150  coco/segm_mAP_l: 0.1710
2023/02/10 00:37:50 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_balloon_20230210_003647
2023/02/10 00:37:50 - mmengine - INFO - Saving checkpoint at 2 epochs
2023/02/10 00:38:01 - mmengine - INFO - Evaluating bbox...
2023/02/10 00:38:01 - mmengine - INFO - bbox_mAP_copypaste: 0.361 0.515 0.441 0.004 0.188 0.438
2023/02/10 00:38:01 - mmengine - INFO - Evaluating segm...
2023/02/10 00:38:01 - mmengine - INFO - segm_mAP_copypaste: 0.457 0.517 0.506 0.012 0.178 0.596
2023/02/10 00:38:01 - mmengine - INFO - Epoch(val) [2][13/13]  coco/bbox_mAP: 0.3610  coco/bbox_mAP_50: 0.5150  coco/bbox_mAP_75: 0.4410  coco/bbox_mAP_s: 0.0040  coco/bbox_mAP_m: 0.1880  coco/bbox_mAP_l: 0.4380  coco/segm_mAP: 0.4570  coco/segm_mAP_50: 0.5170  coco/segm_mAP_75: 0.5060  coco/segm_mAP_s: 0.0120  coco/segm_mAP_m: 0.1780  coco/segm_mAP_l: 0.5960
2023/02/10 00:38:26 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_balloon_20230210_003647
2023/02/10 00:38:26 - mmengine - INFO - Saving checkpoint at 3 epochs
2023/02/10 00:38:35 - mmengine - INFO - Evaluating bbox...
2023/02/10 00:38:35 - mmengine - INFO - bbox_mAP_copypaste: 0.606 0.834 0.760 0.019 0.629 0.649
2023/02/10 00:38:35 - mmengine - INFO - Evaluating segm...
2023/02/10 00:38:35 - mmengine - INFO - segm_mAP_copypaste: 0.738 0.828 0.822 0.023 0.641 0.811
2023/02/10 00:38:35 - mmengine - INFO - Epoch(val) [3][13/13]  coco/bbox_mAP: 0.6060  coco/bbox_mAP_50: 0.8340  coco/bbox_mAP_75: 0.7600  coco/bbox_mAP_s: 0.0190  coco/bbox_mAP_m: 0.6290  coco/bbox_mAP_l: 0.6490  coco/segm_mAP: 0.7380  coco/segm_mAP_50: 0.8280  coco/segm_mAP_75: 0.8220  coco/segm_mAP_s: 0.0230  coco/segm_mAP_m: 0.6410  coco/segm_mAP_l: 0.8110
2023/02/10 00:39:01 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_balloon_20230210_003647
2023/02/10 00:39:01 - mmengine - INFO - Saving checkpoint at 4 epochs
2023/02/10 00:39:09 - mmengine - INFO - Evaluating bbox...
2023/02/10 00:39:09 - mmengine - INFO - bbox_mAP_copypaste: 0.652 0.846 0.770 0.035 0.663 0.697
2023/02/10 00:39:09 - mmengine - INFO - Evaluating segm...
2023/02/10 00:39:09 - mmengine - INFO - segm_mAP_copypaste: 0.762 0.837 0.829 0.036 0.705 0.819
2023/02/10 00:39:09 - mmengine - INFO - Epoch(val) [4][13/13]  coco/bbox_mAP: 0.6520  coco/bbox_mAP_50: 0.8460  coco/bbox_mAP_75: 0.7700  coco/bbox_mAP_s: 0.0350  coco/bbox_mAP_m: 0.6630  coco/bbox_mAP_l: 0.6970  coco/segm_mAP: 0.7620  coco/segm_mAP_50: 0.8370  coco/segm_mAP_75: 0.8290  coco/segm_mAP_s: 0.0360  coco/segm_mAP_m: 0.7050  coco/segm_mAP_l: 0.8190
2023/02/10 00:39:34 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_balloon_20230210_003647
2023/02/10 00:39:34 - mmengine - INFO - Saving checkpoint at 5 epochs
2023/02/10 00:39:39 - mmengine - INFO - Evaluating bbox...
2023/02/10 00:39:40 - mmengine - INFO - bbox_mAP_copypaste: 0.707 0.870 0.812 0.063 0.700 0.744
2023/02/10 00:39:40 - mmengine - INFO - Evaluating segm...
2023/02/10 00:39:40 - mmengine - INFO - segm_mAP_copypaste: 0.778 0.860 0.851 0.050 0.718 0.831
2023/02/10 00:39:40 - mmengine - INFO - Epoch(val) [5][13/13]  coco/bbox_mAP: 0.7070  coco/bbox_mAP_50: 0.8700  coco/bbox_mAP_75: 0.8120  coco/bbox_mAP_s: 0.0630  coco/bbox_mAP_m: 0.7000  coco/bbox_mAP_l: 0.7440  coco/segm_mAP: 0.7780  coco/segm_mAP_50: 0.8600  coco/segm_mAP_75: 0.8510  coco/segm_mAP_s: 0.0500  coco/segm_mAP_m: 0.7180  coco/segm_mAP_l: 0.8310
2023/02/10 00:40:07 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_balloon_20230210_003647
2023/02/10 00:40:07 - mmengine - INFO - Saving checkpoint at 6 epochs
2023/02/10 00:40:12 - mmengine - INFO - Evaluating bbox...
2023/02/10 00:40:12 - mmengine - INFO - bbox_mAP_copypaste: 0.742 0.883 0.843 0.050 0.686 0.795
2023/02/10 00:40:12 - mmengine - INFO - Evaluating segm...
2023/02/10 00:40:12 - mmengine - INFO - segm_mAP_copypaste: 0.789 0.876 0.866 0.045 0.705 0.848
2023/02/10 00:40:12 - mmengine - INFO - Epoch(val) [6][13/13]  coco/bbox_mAP: 0.7420  coco/bbox_mAP_50: 0.8830  coco/bbox_mAP_75: 0.8430  coco/bbox_mAP_s: 0.0500  coco/bbox_mAP_m: 0.6860  coco/bbox_mAP_l: 0.7950  coco/segm_mAP: 0.7890  coco/segm_mAP_50: 0.8760  coco/segm_mAP_75: 0.8660  coco/segm_mAP_s: 0.0450  coco/segm_mAP_m: 0.7050  coco/segm_mAP_l: 0.8480
2023/02/10 00:40:39 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_balloon_20230210_003647
2023/02/10 00:40:39 - mmengine - INFO - Saving checkpoint at 7 epochs
2023/02/10 00:40:44 - mmengine - INFO - Evaluating bbox...
2023/02/10 00:40:44 - mmengine - INFO - bbox_mAP_copypaste: 0.733 0.891 0.828 0.058 0.713 0.776
2023/02/10 00:40:44 - mmengine - INFO - Evaluating segm...
2023/02/10 00:40:44 - mmengine - INFO - segm_mAP_copypaste: 0.789 0.880 0.871 0.034 0.717 0.841
2023/02/10 00:40:44 - mmengine - INFO - Epoch(val) [7][13/13]  coco/bbox_mAP: 0.7330  coco/bbox_mAP_50: 0.8910  coco/bbox_mAP_75: 0.8280  coco/bbox_mAP_s: 0.0580  coco/bbox_mAP_m: 0.7130  coco/bbox_mAP_l: 0.7760  coco/segm_mAP: 0.7890  coco/segm_mAP_50: 0.8800  coco/segm_mAP_75: 0.8710  coco/segm_mAP_s: 0.0340  coco/segm_mAP_m: 0.7170  coco/segm_mAP_l: 0.8410
2023/02/10 00:41:11 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_balloon_20230210_003647
2023/02/10 00:41:11 - mmengine - INFO - Saving checkpoint at 8 epochs
2023/02/10 00:41:16 - mmengine - INFO - Evaluating bbox...
2023/02/10 00:41:16 - mmengine - INFO - bbox_mAP_copypaste: 0.713 0.894 0.880 0.072 0.696 0.755
2023/02/10 00:41:16 - mmengine - INFO - Evaluating segm...
2023/02/10 00:41:16 - mmengine - INFO - segm_mAP_copypaste: 0.790 0.886 0.876 0.043 0.700 0.848
2023/02/10 00:41:16 - mmengine - INFO - Epoch(val) [8][13/13]  coco/bbox_mAP: 0.7130  coco/bbox_mAP_50: 0.8940  coco/bbox_mAP_75: 0.8800  coco/bbox_mAP_s: 0.0720  coco/bbox_mAP_m: 0.6960  coco/bbox_mAP_l: 0.7550  coco/segm_mAP: 0.7900  coco/segm_mAP_50: 0.8860  coco/segm_mAP_75: 0.8760  coco/segm_mAP_s: 0.0430  coco/segm_mAP_m: 0.7000  coco/segm_mAP_l: 0.8480
2023/02/10 00:41:41 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_balloon_20230210_003647
2023/02/10 00:41:41 - mmengine - INFO - Saving checkpoint at 9 epochs
2023/02/10 00:41:46 - mmengine - INFO - Evaluating bbox...
2023/02/10 00:41:46 - mmengine - INFO - bbox_mAP_copypaste: 0.729 0.888 0.831 0.034 0.723 0.770
2023/02/10 00:41:46 - mmengine - INFO - Evaluating segm...
2023/02/10 00:41:46 - mmengine - INFO - segm_mAP_copypaste: 0.793 0.877 0.874 0.018 0.718 0.852
2023/02/10 00:41:46 - mmengine - INFO - Epoch(val) [9][13/13]  coco/bbox_mAP: 0.7290  coco/bbox_mAP_50: 0.8880  coco/bbox_mAP_75: 0.8310  coco/bbox_mAP_s: 0.0340  coco/bbox_mAP_m: 0.7230  coco/bbox_mAP_l: 0.7700  coco/segm_mAP: 0.7930  coco/segm_mAP_50: 0.8770  coco/segm_mAP_75: 0.8740  coco/segm_mAP_s: 0.0180  coco/segm_mAP_m: 0.7180  coco/segm_mAP_l: 0.8520
2023/02/10 00:42:13 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_balloon_20230210_003647
2023/02/10 00:42:13 - mmengine - INFO - Saving checkpoint at 10 epochs
2023/02/10 00:42:17 - mmengine - INFO - Evaluating bbox...
2023/02/10 00:42:17 - mmengine - INFO - bbox_mAP_copypaste: 0.749 0.889 0.851 0.034 0.724 0.796
2023/02/10 00:42:17 - mmengine - INFO - Evaluating segm...
2023/02/10 00:42:17 - mmengine - INFO - segm_mAP_copypaste: 0.794 0.878 0.875 0.019 0.704 0.856
2023/02/10 00:42:17 - mmengine - INFO - Epoch(val) [10][13/13]  coco/bbox_mAP: 0.7490  coco/bbox_mAP_50: 0.8890  coco/bbox_mAP_75: 0.8510  coco/bbox_mAP_s: 0.0340  coco/bbox_mAP_m: 0.7240  coco/bbox_mAP_l: 0.7960  coco/segm_mAP: 0.7940  coco/segm_mAP_50: 0.8780  coco/segm_mAP_75: 0.8750  coco/segm_mAP_s: 0.0190  coco/segm_mAP_m: 0.7040  coco/segm_mAP_l: 0.8560
2023/02/10 00:42:44 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_balloon_20230210_003647
2023/02/10 00:42:44 - mmengine - INFO - Saving checkpoint at 11 epochs
2023/02/10 00:42:48 - mmengine - INFO - Evaluating bbox...
2023/02/10 00:42:48 - mmengine - INFO - bbox_mAP_copypaste: 0.752 0.890 0.833 0.034 0.729 0.800
2023/02/10 00:42:48 - mmengine - INFO - Evaluating segm...
2023/02/10 00:42:48 - mmengine - INFO - segm_mAP_copypaste: 0.797 0.879 0.876 0.019 0.715 0.858
2023/02/10 00:42:48 - mmengine - INFO - Epoch(val) [11][13/13]  coco/bbox_mAP: 0.7520  coco/bbox_mAP_50: 0.8900  coco/bbox_mAP_75: 0.8330  coco/bbox_mAP_s: 0.0340  coco/bbox_mAP_m: 0.7290  coco/bbox_mAP_l: 0.8000  coco/segm_mAP: 0.7970  coco/segm_mAP_50: 0.8790  coco/segm_mAP_75: 0.8760  coco/segm_mAP_s: 0.0190  coco/segm_mAP_m: 0.7150  coco/segm_mAP_l: 0.8580
2023/02/10 00:43:15 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_balloon_20230210_003647
2023/02/10 00:43:15 - mmengine - INFO - Saving checkpoint at 12 epochs
2023/02/10 00:43:19 - mmengine - INFO - Evaluating bbox...
2023/02/10 00:43:19 - mmengine - INFO - bbox_mAP_copypaste: 0.754 0.890 0.832 0.034 0.729 0.803
2023/02/10 00:43:19 - mmengine - INFO - Evaluating segm...
2023/02/10 00:43:19 - mmengine - INFO - segm_mAP_copypaste: 0.796 0.879 0.876 0.019 0.715 0.857
2023/02/10 00:43:19 - mmengine - INFO - Epoch(val) [12][13/13]  coco/bbox_mAP: 0.7540  coco/bbox_mAP_50: 0.8900  coco/bbox_mAP_75: 0.8320  coco/bbox_mAP_s: 0.0340  coco/bbox_mAP_m: 0.7290  coco/bbox_mAP_l: 0.8030  coco/segm_mAP: 0.7960  coco/segm_mAP_50: 0.8790  coco/segm_mAP_75: 0.8760  coco/segm_mAP_s: 0.0190  coco/segm_mAP_m: 0.7150  coco/segm_mAP_l: 0.8570
2023/02/10 00:43:45 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_balloon_20230210_003647
2023/02/10 00:43:45 - mmengine - INFO - Saving checkpoint at 13 epochs
2023/02/10 00:43:50 - mmengine - INFO - Evaluating bbox...
2023/02/10 00:43:50 - mmengine - INFO - bbox_mAP_copypaste: 0.750 0.889 0.831 0.034 0.721 0.798
2023/02/10 00:43:50 - mmengine - INFO - Evaluating segm...
2023/02/10 00:43:50 - mmengine - INFO - segm_mAP_copypaste: 0.793 0.878 0.875 0.019 0.702 0.856
2023/02/10 00:43:50 - mmengine - INFO - Epoch(val) [13][13/13]  coco/bbox_mAP: 0.7500  coco/bbox_mAP_50: 0.8890  coco/bbox_mAP_75: 0.8310  coco/bbox_mAP_s: 0.0340  coco/bbox_mAP_m: 0.7210  coco/bbox_mAP_l: 0.7980  coco/segm_mAP: 0.7930  coco/segm_mAP_50: 0.8780  coco/segm_mAP_75: 0.8750  coco/segm_mAP_s: 0.0190  coco/segm_mAP_m: 0.7020  coco/segm_mAP_l: 0.8560
2023/02/10 00:44:17 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_balloon_20230210_003647
2023/02/10 00:44:17 - mmengine - INFO - Saving checkpoint at 14 epochs
2023/02/10 00:44:21 - mmengine - INFO - Evaluating bbox...
2023/02/10 00:44:21 - mmengine - INFO - bbox_mAP_copypaste: 0.755 0.889 0.832 0.034 0.721 0.805
2023/02/10 00:44:21 - mmengine - INFO - Evaluating segm...
2023/02/10 00:44:21 - mmengine - INFO - segm_mAP_copypaste: 0.793 0.878 0.875 0.019 0.702 0.857
2023/02/10 00:44:21 - mmengine - INFO - Epoch(val) [14][13/13]  coco/bbox_mAP: 0.7550  coco/bbox_mAP_50: 0.8890  coco/bbox_mAP_75: 0.8320  coco/bbox_mAP_s: 0.0340  coco/bbox_mAP_m: 0.7210  coco/bbox_mAP_l: 0.8050  coco/segm_mAP: 0.7930  coco/segm_mAP_50: 0.8780  coco/segm_mAP_75: 0.8750  coco/segm_mAP_s: 0.0190  coco/segm_mAP_m: 0.7020  coco/segm_mAP_l: 0.8570
2023/02/10 00:44:47 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_balloon_20230210_003647
2023/02/10 00:44:47 - mmengine - INFO - Saving checkpoint at 15 epochs
2023/02/10 00:44:51 - mmengine - INFO - Evaluating bbox...
2023/02/10 00:44:51 - mmengine - INFO - bbox_mAP_copypaste: 0.754 0.889 0.832 0.034 0.729 0.802
2023/02/10 00:44:51 - mmengine - INFO - Evaluating segm...
2023/02/10 00:44:51 - mmengine - INFO - segm_mAP_copypaste: 0.793 0.878 0.875 0.019 0.702 0.857
2023/02/10 00:44:51 - mmengine - INFO - Epoch(val) [15][13/13]  coco/bbox_mAP: 0.7540  coco/bbox_mAP_50: 0.8890  coco/bbox_mAP_75: 0.8320  coco/bbox_mAP_s: 0.0340  coco/bbox_mAP_m: 0.7290  coco/bbox_mAP_l: 0.8020  coco/segm_mAP: 0.7930  coco/segm_mAP_50: 0.8780  coco/segm_mAP_75: 0.8750  coco/segm_mAP_s: 0.0190  coco/segm_mAP_m: 0.7020  coco/segm_mAP_l: 0.8570
2023/02/10 00:45:18 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_balloon_20230210_003647
2023/02/10 00:45:18 - mmengine - INFO - Saving checkpoint at 16 epochs
2023/02/10 00:45:23 - mmengine - INFO - Evaluating bbox...
2023/02/10 00:45:23 - mmengine - INFO - bbox_mAP_copypaste: 0.755 0.890 0.833 0.034 0.729 0.803
2023/02/10 00:45:23 - mmengine - INFO - Evaluating segm...
2023/02/10 00:45:23 - mmengine - INFO - segm_mAP_copypaste: 0.794 0.879 0.876 0.019 0.702 0.858
2023/02/10 00:45:23 - mmengine - INFO - Epoch(val) [16][13/13]  coco/bbox_mAP: 0.7550  coco/bbox_mAP_50: 0.8900  coco/bbox_mAP_75: 0.8330  coco/bbox_mAP_s: 0.0340  coco/bbox_mAP_m: 0.7290  coco/bbox_mAP_l: 0.8030  coco/segm_mAP: 0.7940  coco/segm_mAP_50: 0.8790  coco/segm_mAP_75: 0.8760  coco/segm_mAP_s: 0.0190  coco/segm_mAP_m: 0.7020  coco/segm_mAP_l: 0.8580
2023/02/10 00:45:49 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_balloon_20230210_003647
2023/02/10 00:45:49 - mmengine - INFO - Saving checkpoint at 17 epochs
2023/02/10 00:45:53 - mmengine - INFO - Evaluating bbox...
2023/02/10 00:45:53 - mmengine - INFO - bbox_mAP_copypaste: 0.755 0.890 0.832 0.034 0.729 0.802
2023/02/10 00:45:53 - mmengine - INFO - Evaluating segm...
2023/02/10 00:45:53 - mmengine - INFO - segm_mAP_copypaste: 0.794 0.879 0.875 0.019 0.702 0.857
2023/02/10 00:45:53 - mmengine - INFO - Epoch(val) [17][13/13]  coco/bbox_mAP: 0.7550  coco/bbox_mAP_50: 0.8900  coco/bbox_mAP_75: 0.8320  coco/bbox_mAP_s: 0.0340  coco/bbox_mAP_m: 0.7290  coco/bbox_mAP_l: 0.8020  coco/segm_mAP: 0.7940  coco/segm_mAP_50: 0.8790  coco/segm_mAP_75: 0.8750  coco/segm_mAP_s: 0.0190  coco/segm_mAP_m: 0.7020  coco/segm_mAP_l: 0.8570
2023/02/10 00:46:18 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_balloon_20230210_003647
2023/02/10 00:46:18 - mmengine - INFO - Saving checkpoint at 18 epochs
2023/02/10 00:46:22 - mmengine - INFO - Evaluating bbox...
2023/02/10 00:46:22 - mmengine - INFO - bbox_mAP_copypaste: 0.755 0.891 0.833 0.034 0.729 0.803
2023/02/10 00:46:22 - mmengine - INFO - Evaluating segm...
2023/02/10 00:46:22 - mmengine - INFO - segm_mAP_copypaste: 0.795 0.880 0.876 0.019 0.702 0.858
2023/02/10 00:46:22 - mmengine - INFO - Epoch(val) [18][13/13]  coco/bbox_mAP: 0.7550  coco/bbox_mAP_50: 0.8910  coco/bbox_mAP_75: 0.8330  coco/bbox_mAP_s: 0.0340  coco/bbox_mAP_m: 0.7290  coco/bbox_mAP_l: 0.8030  coco/segm_mAP: 0.7950  coco/segm_mAP_50: 0.8800  coco/segm_mAP_75: 0.8760  coco/segm_mAP_s: 0.0190  coco/segm_mAP_m: 0.7020  coco/segm_mAP_l: 0.8580
2023/02/10 00:46:47 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_balloon_20230210_003647
2023/02/10 00:46:47 - mmengine - INFO - Saving checkpoint at 19 epochs
2023/02/10 00:46:52 - mmengine - INFO - Evaluating bbox...
2023/02/10 00:46:52 - mmengine - INFO - bbox_mAP_copypaste: 0.756 0.891 0.834 0.034 0.730 0.803
2023/02/10 00:46:52 - mmengine - INFO - Evaluating segm...
2023/02/10 00:46:52 - mmengine - INFO - segm_mAP_copypaste: 0.795 0.880 0.877 0.019 0.704 0.858
2023/02/10 00:46:52 - mmengine - INFO - Epoch(val) [19][13/13]  coco/bbox_mAP: 0.7560  coco/bbox_mAP_50: 0.8910  coco/bbox_mAP_75: 0.8340  coco/bbox_mAP_s: 0.0340  coco/bbox_mAP_m: 0.7300  coco/bbox_mAP_l: 0.8030  coco/segm_mAP: 0.7950  coco/segm_mAP_50: 0.8800  coco/segm_mAP_75: 0.8770  coco/segm_mAP_s: 0.0190  coco/segm_mAP_m: 0.7040  coco/segm_mAP_l: 0.8580
2023/02/10 00:47:17 - mmengine - INFO - Exp name: mask-rcnn_r50_fpn_1x_balloon_20230210_003647
2023/02/10 00:47:17 - mmengine - INFO - Saving checkpoint at 20 epochs
2023/02/10 00:47:21 - mmengine - INFO - Evaluating bbox...
2023/02/10 00:47:21 - mmengine - INFO - bbox_mAP_copypaste: 0.755 0.891 0.833 0.034 0.730 0.802
2023/02/10 00:47:21 - mmengine - INFO - Evaluating segm...
2023/02/10 00:47:21 - mmengine - INFO - segm_mAP_copypaste: 0.797 0.879 0.876 0.019 0.716 0.857
2023/02/10 00:47:21 - mmengine - INFO - Epoch(val) [20][13/13]  coco/bbox_mAP: 0.7550  coco/bbox_mAP_50: 0.8910  coco/bbox_mAP_75: 0.8330  coco/bbox_mAP_s: 0.0340  coco/bbox_mAP_m: 0.7300  coco/bbox_mAP_l: 0.8020  coco/segm_mAP: 0.7970  coco/segm_mAP_50: 0.8790  coco/segm_mAP_75: 0.8760  coco/segm_mAP_s: 0.0190  coco/segm_mAP_m: 0.7160  coco/segm_mAP_l: 0.8570
